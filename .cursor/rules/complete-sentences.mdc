---
globs: *.ts,*.tsx,*.js,*.jsx,*.py,*.java,*.cs,*.cpp,*.c,*.h,*.go,*.rs,*.php,*.rb,*.swift,*.kt,*.scala,*.clj,*.hs,*.ml,*.fs,*.vb,*.sql,*.sh,*.bash,*.ps1,*.yaml,*.yml,*.json,*.xml,*.html,*.css,*.scss,*.sass,*.less,*.md,*.rst,*.txt
description: Code comment style guidelines for complete sentences with proper punctuation
---

# Code Comment Style Guidelines

## Complete Sentences with Proper Punctuation

When writing comments in code, always use complete sentences with proper
punctuation.

### ✅ Good Examples

```typescript
// Calculate total price with tax, using the standard business rule that
// shipping is added after tax calculation for compliance with tax regulations.
function calculateTotal(basePrice: number, taxRate: number): number {
  const priceWithTax = basePrice * (1 + taxRate);
  return priceWithTax + SHIPPING_COST;
}
```

```typescript
// Track quad additions for real-time analytics dashboard updates.
// This listener ensures the UI reflects changes immediately without polling.
store.addEventListener(SyncStoreEvent.ADD_QUAD, (event: Event) => {
  const customEvent = event as CustomEvent;
  const quad = customEvent.detail[0] as Quad;
  updateSubjectCounts([quad], 1);
});
```

```typescript
// Use occurrence-based scoring to prioritize entities that appear more
// frequently in the knowledge graph, improving search relevance.
const sparqlQuery = `
  SELECT ?subject (COUNT(?object) AS ?frequency) WHERE {
    ?subject ?predicate ?object .
    FILTER(isLiteral(?object) && datatype(?object) = xsd:string)
    FILTER(CONTAINS(LCASE(?object), LCASE("${
  request.text.replace(/"/g, '\\"')
}")))
  }
  GROUP BY ?subject
  ORDER BY DESC(?frequency)
  LIMIT 10
`;
```

### ❌ Bad Examples

```typescript
// This function calculates the total price including tax.
// The tax rate is applied to the base price before adding shipping costs.
function calculateTotal(basePrice: number, taxRate: number): number {
  // First, we apply the tax to the base price.
  const priceWithTax = basePrice * (1 + taxRate);

  // Then we add the shipping cost to get the final total.
  return priceWithTax + SHIPPING_COST;
}
```

```typescript
// Listen to ADD_QUAD events to track new quads being added.
store.addEventListener(SyncStoreEvent.ADD_QUAD, (event: Event) => {
  const customEvent = event as CustomEvent;
  const quad = customEvent.detail[0] as Quad;
  updateSubjectCounts([quad], 1);
});
```

```typescript
// Get the entity value from the binding.
const entity = binding.get("entity")?.value;
// Get the count value from the binding.
const count = binding.get("count")?.value;
// Check if both values exist.
if (entity && count) {
  // Convert count to number and use as score.
  const score = parseInt(count, 10);
  hits.push({ subject: entity, score });
}
```

## Guidelines

1. **Complete Sentences**: Write comments as full sentences with subject and
   verb.
2. **Proper Punctuation**: End sentences with periods, question marks, or
   exclamation points as appropriate.
3. **Capitalization**: Start sentences with capital letters.
4. **Avoid the Obvious**: Don't comment on what the code obviously does. Focus
   on the "why" and "how" rather than the "what".
5. **Provide Context**: Include relevant additional context that isn't apparent
   from reading the code alone.
6. **Clarity**: Make comments clear and descriptive, not just brief notes.

## Exceptions

- Single-line variable declarations where a brief phrase is acceptable:
  ```typescript
  const MAX_RETRIES = 3; // Maximum number of retry attempts
  ```

- TODO comments can be brief but should still be clear:
  ```typescript
  // TODO: Implement error handling for network failures.
  ```

- Inline comments for complex expressions can be brief:
  ```typescript
  const result = a * b + c; // Apply formula: base * multiplier + offset
  ```

## Benefits

- **Readability**: Complete sentences are easier to read and understand.
- **Professionalism**: Proper punctuation shows attention to detail.
- **Maintainability**: Clear comments help future developers understand the
  code.
- **Context**: Comments provide valuable context that code alone cannot convey.
- **Efficiency**: Avoid redundant comments that simply restate the obvious.
- **Consistency**: Establishes a standard for all team members to follow.---
  description: globs: alwaysApply: true

---
